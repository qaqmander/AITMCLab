# Welcome to lab5
from AITMCLab.Crypto.Util.number import bytes_to_long, getPrime
import random
from secret import flag    # instead of flag = 'flag{*******}'

# N = p * q, for RSA
N = 21950613536281390486175757463951027643556662621824579929664918617520636813458994325720569579695736856079459340474316751889021883755540017377473409564797843019125596929359598746535191841338208989879009508321774759757392464348925062704618198548398309908878380041795632951630513476281083426748653263731919122841901104123145297521411331174923397782111024006706017326210374498919922250769088886696170966869394222786903527353128540253585182758832324462426318387914150570168191590734053846371944717431858873198597415498765665035309188308408227521317670668417094970551798085092238594309838065757300622761550073415879726501051
e = 0x10001

m = bytes_to_long(flag)

with open('key.enc', 'w') as f:
    while m:
        p = getPrime(32)
        padding = random.randint(0, 2**1000) ** 2
        # operating priority is confusing...
        message = padding << pow(m, p - 1, p) + m % 2
        cipher = pow(message, e, N)
        f.write(hex(cipher) + '\n')
        m /= 2
